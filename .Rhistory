print("29")
list <- data.frame(rank=c(1:count_rank), c(rank_weight[1:count_rank,]))
rank_weight <- rank_weight[1:count_rank,]
print("31")
draw_data <- data.frame(c(list[inId2,])) #找到想印的名次的資料(目前是印權重第一名)
print("33")
#from_id_name <- dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))
#table_from_id_name <- from_id_name[1:count_rank,2] #列出前1%的from_id_name
#to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id order by `total` desc"))
#table_to_id_name <- to_id_name[1:count_rank,2] #列出前1%的to_id_name
print("38")
print(inId2)
print(draw_data)
draw_from_id <- draw_data[inId2,6] #找到from_id
print(draw_from_id)
draw_to_id <- draw_data[inId2,7] #找到to_id
weight <- draw_data[inId2,8] #找到weight
#draw_from_id_name <- dbGetQuery(connect ,paste("select from_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.from_id and n.id = ",inId2," group by from_id"))
#draw_to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id and n.id = ",inId2," group by to_id"))
node <- data.frame(id=c(draw_from_id,draw_to_id),label = c(draw_data[inId2,3],draw_data[inId2,9]),title = c(draw_data[inId2,6],draw_data[inId2,7]),font.size = 20)
edge <- data.frame(from=c(draw_from_id), to=c(draw_to_id), value=c(weight))
print(node)
print(edge)
edge$width <- weight
print("47")
print(inId1)
print(inId2)
print(node)
print(edge)
result_table<- data.frame(rank=c(list$rank),from_id=c(rank_weight$from_id),from_id_name=c(rank_weight$name),to_id=c(rank_weight$to_id),to_id_name=c(rank_weight$to_id_name),total=c(rank_weight$total))
write.csv(result_table,"E:\\GitHub\\flask\\result_table.csv", row.names = FALSE, fileEncoding = "UTF-8")
print(52)
result_pic <- visNetwork(node, edge, width = "100%", height = "500px")%>%
visNodes(size = 30)%>%
visOptions(highlightNearest = TRUE
,selectedBy= "label"
,nodesIdSelection = list(enabled = TRUE
,style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: darkblue;
border:none;
outline:none;'))%>%
visPhysics(stabilization = FALSE,#動態效果
solver = "repulsion",
repulsion = list(gravitationalConstant = 1500))
print("59")
visSave(result_pic, file = "E:\\GitHub\\flask\\templates\\result.html",selfcontained = FALSE, background = "white")
print("61")
print("64")
# library(visNetwork)
# #library(sqldf)
# #library(RODBC)
# #library(dbConnect)
# #library(DBI)
# #library(gWidgets)
# library(RMySQL)
# #library(xlsx)
# #library(sqldf)
# args <- commandArgs(trailingOnly = TRUE)
# inId1 <- args[1] # CLI input parameter
# inId2 <- args[2]
# #inId1 <- "未受傷"
# #inId2 <- 2
# connect = dbConnect(MySQL(), dbname = "trans",username = "root",
#                     password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
# dbListTables(connect)
# dbSendQuery(connect,"SET NAMES BIG5") # 設定資料庫連線編碼
# Sys.getlocale("LC_ALL") #解決中文編碼問題
# print("21")
# print(inId1)
# toIdName<-(dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.to_id")))
# select_result <- data.frame(c(dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))),to_id_name=c(toIdName[,2]))
# print("23")
# select_result_chosen <- select_result[select_result$result_name==inId1,] #拿到某結果為條件下的所有資料
# #print(select_result_chosen)
# #rank_weight <- dbGetQuery(connect, paste("select * from trans.result_weight where result_name = '",inId1,"' order by `total` desc"))
# rank_weight <- data.frame(c(select_result_chosen[order(-select_result_chosen$total),])) #將權重由高到低排序
# #print(rank_weight)
# print("25")
# #count <- dbGetQuery(connect ,paste("select count(result_name) from trans.result_weight where result_name = '",inId1,"'"))
# count <- data.frame(c(dim(rank_weight)))
# count <- count[1,1] #計算資料筆數
# print(count)
# print("27")
# count_rank <- round(count*0.01) #計算要顯示幾筆資料(目前設定前1%)
# print("29")
# list <- data.frame(rank=c(1:count_rank), c(rank_weight[1:count_rank,]))
# rank_weight <- rank_weight[1:count_rank,]
# print("31")
# draw_data <- data.frame(c(list[inId2,])) #找到想印的名次的資料(目前是印權重第一名)
# print("33")
# #from_id_name <- dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))
# #table_from_id_name <- from_id_name[1:count_rank,2] #列出前1%的from_id_name
# #to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id order by `total` desc"))
# #table_to_id_name <- to_id_name[1:count_rank,2] #列出前1%的to_id_name
# print("38")
# print(inId2)
# print(draw_data)
# draw_from_id <- draw_data[inId2,6] #找到from_id
# print(draw_from_id)
# draw_to_id <- draw_data[inId2,7] #找到to_id
# weight <- draw_data[inId2,8] #找到weight
# #draw_from_id_name <- dbGetQuery(connect ,paste("select from_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.from_id and n.id = ",inId2," group by from_id"))
# #draw_to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id and n.id = ",inId2," group by to_id"))
# node <- data.frame(id=c(draw_from_id,draw_to_id),label = c(draw_data[inId2,3],draw_data[inId2,9]),title = c(draw_data[inId2,6],draw_data[inId2,7]),font.size = 20)
# edge <- data.frame(from=c(draw_from_id), to=c(draw_to_id), value=c(weight))
# print(node)
# print(edge)
# edge$width <- weight
# print("47")
# print(inId1)
# print(inId2)
# print(node)
# print(edge)
# result_table<- data.frame(rank=c(list$rank),from_id=c(rank_weight$from_id),from_id_name=c(rank_weight$name),to_id=c(rank_weight$to_id),to_id_name=c(rank_weight$to_id_name),total=c(rank_weight$total))
# write.csv(result_table,"E:\\GitHub\\flask\\result_table.csv", row.names = FALSE, fileEncoding = "UTF-8")
# print(52)
# result_pic <- visNetwork(node, edge, width = "100%", height = "500px")%>%
#   visNodes(size = 30)%>%
#   visOptions(highlightNearest = TRUE
#               ,selectedBy= "label"
#               ,nodesIdSelection = list(enabled = TRUE
#                                         ,style = 'width: 200px; height: 26px;
#                                  background: #f8f8f8;
#                                  color: darkblue;
#                                  border:none;
#                                  outline:none;'))%>%
#   visPhysics(stabilization = FALSE,#動態效果
#              solver = "repulsion",
#              repulsion = list(gravitationalConstant = 1500))
# print("59")
# visSave(result_pic, file = "E:\\GitHub\\flask\\templates\\result.html",selfcontained = FALSE, background = "white")
# print("61")
# print("64")
library(visNetwork)
#library(sqldf)
#library(RODBC)
#library(dbConnect)
#library(DBI)
#library(gWidgets)
library(RMySQL)
#library(xlsx)
#library(sqldf)
args <- commandArgs(trailingOnly = TRUE)
#inId1 <- args[1] # CLI input parameter
#inId2 <- args[2]
inId1 <- "未受傷"
inId2 <- 2
connect = dbConnect(MySQL(), dbname = "trans",username = "root",
password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
dbListTables(connect)
dbSendQuery(connect,"SET NAMES BIG5") # 設定資料庫連線編碼
Sys.getlocale("LC_ALL") #解決中文編碼問題
print("21")
print(inId1)
toIdName<-(dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.to_id")))
select_result <- data.frame(c(dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))),to_id_name=c(toIdName[,2]))
print("23")
select_result_chosen <- select_result[select_result$result_name==inId1,] #拿到某結果為條件下的所有資料
#print(select_result_chosen)
#rank_weight <- dbGetQuery(connect, paste("select * from trans.result_weight where result_name = '",inId1,"' order by `total` desc"))
rank_weight <- data.frame(c(select_result_chosen[order(-select_result_chosen$total),])) #將權重由高到低排序
#print(rank_weight)
print("25")
#count <- dbGetQuery(connect ,paste("select count(result_name) from trans.result_weight where result_name = '",inId1,"'"))
count <- data.frame(c(dim(rank_weight)))
count <- count[1,1] #計算資料筆數
print(count)
print("27")
count_rank <- round(count*0.01) #計算要顯示幾筆資料(目前設定前1%)
print("29")
list <- data.frame(rank=c(1:count_rank), c(rank_weight[1:count_rank,]))
rank_weight <- rank_weight[1:count_rank,]
print("31")
draw_data <- data.frame(c(list[inId2,])) #找到想印的名次的資料(目前是印權重第一名)
print("33")
#from_id_name <- dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))
#table_from_id_name <- from_id_name[1:count_rank,2] #列出前1%的from_id_name
#to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id order by `total` desc"))
#table_to_id_name <- to_id_name[1:count_rank,2] #列出前1%的to_id_name
print("38")
print(inId2)
print(draw_data)
draw_from_id <- draw_data[inId2,6] #找到from_id
print(draw_from_id)
draw_to_id <- draw_data[inId2,7] #找到to_id
weight <- draw_data[inId2,8] #找到weight
#draw_from_id_name <- dbGetQuery(connect ,paste("select from_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.from_id and n.id = ",inId2," group by from_id"))
#draw_to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id and n.id = ",inId2," group by to_id"))
node <- data.frame(id=c(draw_from_id,draw_to_id),label = c(draw_data[inId2,3],draw_data[inId2,9]),title = c(draw_data[inId2,6],draw_data[inId2,7]),font.size = 20)
edge <- data.frame(from=c(draw_from_id), to=c(draw_to_id), value=c(weight))
print(node)
print(edge)
edge$width <- weight
print("47")
print(inId1)
print(inId2)
print(node)
print(edge)
result_table<- data.frame(rank=c(list$rank),from_id=c(rank_weight$from_id),from_id_name=c(rank_weight$name),to_id=c(rank_weight$to_id),to_id_name=c(rank_weight$to_id_name),total=c(rank_weight$total))
write.csv(result_table,"E:\\GitHub\\flask\\result_table.csv", row.names = FALSE, fileEncoding = "UTF-8")
print(52)
result_pic <- visNetwork(node, edge, width = "100%", height = "500px")%>%
visNodes(size = 30)%>%
visOptions(highlightNearest = TRUE
,selectedBy= "label"
,nodesIdSelection = list(enabled = TRUE
,style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: darkblue;
border:none;
outline:none;'))%>%
visPhysics(stabilization = FALSE,#動態效果
solver = "repulsion",
repulsion = list(gravitationalConstant = 1500))
print("59")
visSave(result_pic, file = "E:\\GitHub\\flask\\templates\\result.html",selfcontained = FALSE, background = "white")
print("61")
print("64")
library(visNetwork)
#library(sqldf)
#library(RODBC)
#library(dbConnect)
#library(DBI)
#library(gWidgets)
library(RMySQL)
#library(xlsx)
#library(sqldf)
args <- commandArgs(trailingOnly = TRUE)
inId1 <- args[1] # CLI input parameter
inId2 <- args[2]
#inId1 <- "未受傷"
#inId2 <- 2
connect = dbConnect(MySQL(), dbname = "trans",username = "root",
password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
dbListTables(connect)
dbSendQuery(connect,"SET NAMES BIG5") # 設定資料庫連線編碼
Sys.getlocale("LC_ALL") #解決中文編碼問題
print("21")
print(inId1)
toIdName<-(dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.to_id")))
select_result <- data.frame(c(dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))),to_id_name=c(toIdName[,2]))
print("23")
select_result_chosen <- select_result[select_result$result_name==inId1,] #拿到某結果為條件下的所有資料
#print(select_result_chosen)
#rank_weight <- dbGetQuery(connect, paste("select * from trans.result_weight where result_name = '",inId1,"' order by `total` desc"))
rank_weight <- data.frame(c(select_result_chosen[order(-select_result_chosen$total),])) #將權重由高到低排序
#print(rank_weight)
print("25")
#count <- dbGetQuery(connect ,paste("select count(result_name) from trans.result_weight where result_name = '",inId1,"'"))
count <- data.frame(c(dim(rank_weight)))
count <- count[1,1] #計算資料筆數
print(count)
print("27")
count_rank <- round(count*0.01) #計算要顯示幾筆資料(目前設定前1%)
print("29")
list <- data.frame(rank=c(1:count_rank), c(rank_weight[1:count_rank,]))
rank_weight <- rank_weight[1:count_rank,]
print("31")
draw_data <- data.frame(c(list[inId2,])) #找到想印的名次的資料(目前是印權重第一名)
print("33")
#from_id_name <- dbGetQuery(connect ,paste("select * from trans.node n,trans.result_weight r where n.id = r.from_id"))
#table_from_id_name <- from_id_name[1:count_rank,2] #列出前1%的from_id_name
#to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id order by `total` desc"))
#table_to_id_name <- to_id_name[1:count_rank,2] #列出前1%的to_id_name
print("38")
print(inId2)
print(draw_data)
draw_from_id <- draw_data[inId2,6] #找到from_id
print(draw_from_id)
draw_to_id <- draw_data[inId2,7] #找到to_id
weight <- draw_data[inId2,8] #找到weight
#draw_from_id_name <- dbGetQuery(connect ,paste("select from_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.from_id and n.id = ",inId2," group by from_id"))
#draw_to_id_name <- dbGetQuery(connect ,paste("select to_id,`name` from trans.node n,trans.result_weight r where result_name = '",inId1,"' and n.id = r.to_id and n.id = ",inId2," group by to_id"))
node <- data.frame(id=c(draw_from_id,draw_to_id),label = c(draw_data[inId2,3],draw_data[inId2,9]),title = c(draw_data[inId2,6],draw_data[inId2,7]),font.size = 20)
edge <- data.frame(from=c(draw_from_id), to=c(draw_to_id), value=c(weight))
print(node)
print(edge)
edge$width <- weight
print("47")
print(inId1)
print(inId2)
print(node)
print(edge)
result_table<- data.frame(rank=c(list$rank),from_id=c(rank_weight$from_id),from_id_name=c(rank_weight$name),to_id=c(rank_weight$to_id),to_id_name=c(rank_weight$to_id_name),total=c(rank_weight$total))
write.csv(result_table,"E:\\GitHub\\flask\\result_table.csv", row.names = FALSE, fileEncoding = "UTF-8")
print(52)
result_pic <- visNetwork(node, edge, width = "100%", height = "500px")%>%
visNodes(size = 30)%>%
visOptions(highlightNearest = TRUE
,selectedBy= "label"
,nodesIdSelection = list(enabled = TRUE
,style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: darkblue;
border:none;
outline:none;'))%>%
visPhysics(stabilization = FALSE,#動態效果
solver = "repulsion",
repulsion = list(gravitationalConstant = 1500))
print("59")
visSave(result_pic, file = "E:\\GitHub\\flask\\templates\\result.html",selfcontained = FALSE, background = "white")
print("61")
print("64")
layerTable
library(visNetwork)
library(RMySQL)
library(igraph)
library(utf8)
#install.packages("thepackage",lib="H:/Documents/R/win-library/4.1")
#library(thepackage,lib="H:/Documents/R/win-library/4.1")
layer_csv<- read.csv(file = 'E:\\GitHub\\flask\\layer.csv', encoding = "UTF-8")
names(layer_csv)[1] <- "factor_id"#將第一個欄名變更
connect = dbConnect(MySQL(), dbname = "trans",username = "root",
password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
dbListTables(connect)
dbSendQuery(connect,"SET NAMES BIG5") # 設定資料庫連線編碼
Sys.getlocale(category = "LC_ALL") # 查詢系統編碼環境
layer_to_id<-data.frame(from_id = c(layer_csv$factor_id),id = c(layer_csv$near_id),group=c(layer_csv$level),color=c(layer_csv$color),total=c(layer_csv$weight))
node_layer<- dbGetQuery(connect ,"select * from `node`")
attr_layer<- dbGetQuery(connect ,"select * from `attribute`")
names(attr_layer)[1] <- "attribute"
names(attr_layer)[2] <- "attr_name"
get_layer_attr<- merge(x = node_layer, y = attr_layer, by = "attribute", all.x = TRUE)#將屬性和節點表格合併
all_layer_node<- merge(x = layer_to_id, y = get_layer_attr, by = "id", all.x = TRUE)#用id合併得到節點的屬性資訊
all_layer_node<-unique(all_layer_node)#刪除重複的第二層節點
all_layer_node<-all_layer_node[order(all_layer_node$id,all_layer_node$group),]#將層級做降冪排列
all_layer_node <-all_layer_node[(!duplicated(all_layer_node$id)),]#刪除和第一層重複的第二層節點
#用於畫sna圖的節點
layer_nodes<- data.frame(id = c(all_layer_node$id),
group = c(all_layer_node$group),
label = paste(all_layer_node$name),
title = paste("<p>", all_layer_node$name,"<br>", all_layer_node$attr_name,"<br>",all_layer_node$enname,"</p>"),
font.size = 20,
color=c(all_layer_node$color)
)
#用於畫sna圖的關聯
layer_relationship<- data.frame(from = c(layer_csv$factor_id)
,to = c(layer_csv$near_id)
,value = c(layer_csv$weight)
,font.size = 10
,label = paste("weight", layer_csv$weight)
,font.color ="brown")
print(layer_nodes)
draw_sna_layer<-visNetwork(layer_nodes,layer_relationship, width = "100%", height = "500px")%>%
visNodes(size = 30)%>%
visOptions(highlightNearest = TRUE
, selectedBy= "group"
,nodesIdSelection = list(enabled = TRUE
,style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: darkblue;
border:none;
outline:none;'))%>%
visPhysics(stabilization = FALSE,#動態效果
solver = "repulsion",
repulsion = list(gravitationalConstant = 1500))
visSave(draw_sna_layer, file = "E:\\GitHub\\flask\\templates\\layer.html", selfcontained = FALSE)
from_layer_id<-all_layer_node
names(from_layer_id)[2] <- "from_id"
get_layer_from_attr<-get_layer_attr
names(get_layer_from_attr)[2] <- "from_id"
all_from_layer_node<- merge(x = from_layer_id, y = get_layer_from_attr, by = "from_id", all.x = TRUE)#用id合併得到節點的屬性資訊
layerTable<- data.frame(first_id = c(all_from_layer_node $from_id)
,first_name = c(all_from_layer_node $name.x)
#,first_attr_name = c(all_from_layer_node $attr_name.x)
#,first_eng_name = c(all_from_layer_node $enname.x)
,first_total=c(all_from_layer_node $total)
,second_id = c(all_layer_node $id)
,second_name = c(all_layer_node $name)
,second_total=c(all_layer_node $total)
#,second_attr_name = c(all_layer_node $attr_name)
#,second_eng_name = c(all_layer_node $enname)
#,node_layer=c(all_layer_node $group)
)
layerTable
write.csv(layerTable,"E:\\GitHub\\flask\\layerTable.csv", row.names = FALSE, fileEncoding = "UTF-8")
layer_csv
layer_nodes
layer_nodes
all_layer_node
all_from_layer_node
layerTable<- data.frame(first_id = c(all_from_layer_node $from_id)
,first_name = c(all_from_layer_node $name.y)
#,first_attr_name = c(all_from_layer_node $attr_name.x)
#,first_eng_name = c(all_from_layer_node $enname.x)
,second_id = c(all_from_layer_node $id)
,second_name = c(all_from_layer_node $name.x)
,total=c(all_from_layer_node $total)
,group=c(all_from_layer_node $group)
#,second_attr_name = c(all_layer_node $attr_name)
#,second_eng_name = c(all_layer_node $enname)
#,node_layer=c(all_layer_node $group)
)
layerTable
write.csv(layerTable,paste0("..",.Platform$file.sep,"Flask",.Platform$file.sep,"layer_table.csv"), row.names = FALSE, fileEncoding = "UTF-8")
print(rankTable)
connect = dbConnect(MySQL(), dbname = "trans",username = "root",
password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
dbListTables(connect)
dbSendQuery(connect,"SET NAMES BIG5") # 設定資料庫連線編碼
Sys.getlocale(category = "LC_ALL") # 查詢系統編碼環境
#Sys.setlocale("LC_ALL","Chinese") # 設定系統編碼為簡體中文
args <- commandArgs(trailingOnly = TRUE)
id <- args[1] # CLI input parameter
node8<- dbGetQuery(connect ,paste("select * from `node` where `id`=", id))
relationship8<- dbGetQuery(connect ,paste("select * from `relationship` where `from_id`= ", id))
#選擇from_id
weight10<- dbGetQuery(connect ,paste("select * from `weight` where `from_id`= ", id, " order by `total` desc"))
count_toid<-(length(weight10$to_id))
count_toid<-ceiling(count_toid*0.1)
weightfor10<-weight10[1:count_toid,]
bindnode<-weightfor10
bn<-data.frame(id =bindnode[1,1])
bb<-data.frame(id = (bindnode$to_id))
bb<-rbind(bn,bb)
t3<- dbGetQuery(connect ,"select * from `node`")
a<- dbGetQuery(connect ,"select * from `attribute`")
names(a)[1] <- "attribute"
names(a)[2] <- "attr_name"
getTitle<- merge(x = t3, y = a, by = "attribute", all.x = TRUE)#left join
allNode<- getTitle
all_node<- merge(x = bb, y = allNode, by = "id", all.x = TRUE)#left join
total_nodes<- data.frame(id = c(all_node$id), group = c(all_node$attr_name),
label = paste(all_node$name),
title = paste("<p>", all_node$attr_name,"<br>",all_node$enname,"</p>"),
font.size = 20)
weightRelationship<- data.frame(from = c(bindnode$from_id)
,to = c(bindnode$to_id)
,value = c(bindnode$total)
,font.size = 10
#,label = paste("權重", bindnode$total)
# Why Error?
,font.color ="brown")
print(total_nodes)
snaRank10<-visNetwork(total_nodes,weightRelationship, width = "100%", height = "500px")%>%
visNodes(size = 30)%>%
visOptions(highlightNearest = TRUE
, selectedBy= "label"
,nodesIdSelection = list(enabled = TRUE
,style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: darkblue;
border:none;
outline:none;'))%>%
visPhysics(stabilization = FALSE,#動態效果
solver = "repulsion",
repulsion = list(gravitationalConstant = 1500))
visSave(snaRank10, file = "../flask/templates/snaRank10.html",selfcontained = FALSE, background = "white")
#顯示排名前十關聯名字case次數(權重)與排名數
bindnode$Rank<-floor(rank(-bindnode$total))
rank<-bindnode[order(floor(rank(bindnode$Rank))),]
# connect = dbConnect(MySQL(), dbname = "trans",username = "root",
#                     password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
# dbListTables(connect)
# Sys.setlocale("LC_ALL","Chinese") #解決中文編碼問題
ranknode<- dbGetQuery(connect ,"select * from `node`")
rankatr<- dbGetQuery(connect ,"select * from `attribute`")
names(ranknode)[1] <- "to_id"
ranknodename<- merge(x = rank, y = ranknode, by = "to_id", all.x = TRUE)#left join
library(dplyr)#使用arrange函數
newrank<-arrange(ranknodename, Rank) # 按 Rank 列進行升序排列
# rankTable<- data.frame(肇事因素 = c(newrank$name)
#           , 關聯肇事因素排名 = c(newrank$Rank)
#           ,Case總數=c(newrank$total))
rankTable<- data.frame(factor = c(newrank$name)
,factorRank = c(newrank$Rank)
,caseNumber=c(newrank$total))
print(rankTable)
#排名前十關聯table的csv
write.csv(rankTable,"../flask/rank_table.csv", row.names = FALSE, fileEncoding = "UTF-8")
# install.packages("tidyverse")
# install.packages("jsonlite")
rankTable<- data.frame(factor = c(newrank$name)
,factorRank = c(newrank$Rank)
,caseNumber=c(newrank$total))
print(rankTable)
connect = dbConnect(MySQL(), dbname = "trans",username = "root",
password = "IM39project",host = "140.136.155.121",port=50306,DBMSencoding="UTF8")
dbListTables(connect)
dbSendQuery(connect,"SET NAMES BIG5") # 設定資料庫連線編碼
Sys.getlocale(category = "LC_ALL") # 查詢系統編碼環境
#Sys.setlocale("LC_ALL","Chinese") # 設定系統編碼為簡體中文
args <- commandArgs(trailingOnly = TRUE)
id <- args[1] # CLI input parameter
node8<- dbGetQuery(connect ,paste("select * from `node` where `id`=", id))
relationship8<- dbGetQuery(connect ,paste("select * from `relationship` where `from_id`= ", id))
#選擇from_id
weight10<- dbGetQuery(connect ,paste("select * from `weight` where `from_id`= ", id, " order by `total` desc"))
count_toid<-(length(weight10$to_id))
count_toid<-ceiling(count_toid*0.1)
weightfor10<-weight10[1:count_toid,]
bindnode<-weightfor10
bn<-data.frame(id =bindnode[1,1])
bb<-data.frame(id = (bindnode$to_id))
bb<-rbind(bn,bb)
t3<- dbGetQuery(connect ,"select * from `node`")
a<- dbGetQuery(connect ,"select * from `attribute`")
names(a)[1] <- "attribute"
names(a)[2] <- "attr_name"
getTitle<- merge(x = t3, y = a, by = "attribute", all.x = TRUE)#left join
allNode<- getTitle
all_node<- merge(x = bb, y = allNode, by = "id", all.x = TRUE)#left join
total_nodes<- data.frame(id = c(all_node$id), group = c(all_node$attr_name),
label = paste(all_node$name),
title = paste("<p>", all_node$attr_name,"<br>",all_node$enname,"</p>"),
font.size = 20)
getTitle<- merge(x = t3, y = a, by = "attribute", all.x = TRUE)#left join
allNode<- getTitle
all_node<- merge(x = bb, y = allNode, by = "id", all.x = TRUE)#left join
print("Hello Before library")
Sys.getlocale(category = "LC_ALL") # 查詢系統編碼環境
